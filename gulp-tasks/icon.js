// module.exports = function(gulp, project, env) {
  "use strict";
  var gulp = require('gulp');
  var Handlebars = require('handlebars');
  var _ = require("lodash-node");
  var replace = require("gulp-replace");
  var gulpif = require("gulp-if");
  var del = require("del");
  var $ = require('gulp-load-plugins')();
  var ratio = 0.3;
  var margin = 20;

  // devDependencies
  var concat;
  var sprity;
  var inject;

  // Test Sprite generator
  
  // Generate icons
  // TODO: Move to Fabric or gulp/sprites.js
  // @usage: gulp fab-icon
  var releaseNote = "// This file is generated by gulp/platform.js using sprity.\n"+
                    "// Do not make changes to this file directly.\n"+
                    "// Changes should be made in gulp/platform.js.\n";
  var desktopConf = {
    src: "assets/1267582162044/desktop/*.{png,jpg}",
    split: false,
    orientation: "binary-tree",
    margin: 20,
    classname: "desktop",
    name: "temp_fab-icon-desktop",
    style: "desktop.scss",
    cssPath: "dest/icon/",
    processor: "css",
    template: "assets/gulp_fab-icon.hbs"
  };
  var desktopMixinConf = _.assign({}, desktopConf, {
    name: "fs-icon-desktop",
    style: "desktop-mixins.scss",
    processor: "sass",
    template: "assets/gulp_fab-icon-mixins.hbs"
  });
  var mobileConf = {
    src: "./assets/1267582162044/mobile/*.{png,jpg}",
    split: false,
    engine: "sprity-gm",
    orientation: "binary-tree",
    margin: 20,
    format: "png",
    'dimension': [{
      ratio: 1, dpi: 160
    }, {
      ratio: 2, dpi: 240
    }, {
      ratio: 3, dpi: 320
    }],
    "style-indent-char": 'tab',
    classname: "mobile",
    name: "temp_fab-icon-mobile",
    style: "mobile.scss",
    cssPath: "https://dm-proofing.lbidts.com/imagefeatures/0x0/1267582162044/",
    processor: "css",
    template: "assets/gulp_fab-icon.hbs"
  };
  var mobileMixinConf = _.assign({}, mobileConf, {
    name: "fs-icon-mobile",
    style: "mobile-mixins.scss",
    processor: "sass",
    template: "assets/gulp_fab-icon-mixins.hbs"
  });
  gulp.task("fab-icon", function (cb) {
    // require devDependencies
    var runSequence = require("run-sequence");
    sprity = require('sprity');
    inject = require('gulp-inject-string');
    // run tasks sync
    runSequence(
      'fab-icon-cleanup-before',
      'icon-mixin-mobile',
      'icon-mobile',
      'fab-icon-cleanup-after',
    cb);
  });
  //  gulp.task('fab-icon-make-readme-json', function () {
  //   inject = require('gulp-inject-string');
  //   concat = require('gulp-concat');
  //   return gulp.src([
  //       'src/main/fabric/elements/icon/fab-icon/desktop.scss',
  //       'src/main/fabric/elements/icon/fab-icon/mobile.scss'
  //     ])
  //     .pipe(inject.wrap('[', "],"))
  //     .pipe(replace(/\/\/.*/g, ''))                             // remove: // comments
  //     .pipe(replace(/\@import.*/g, ''))                         // remove: @imports
  //     .pipe(replace(/\.pink [.\{\w\s\t@\(\)\$:\-;\',]*/g, ''))  // remove: .pink .icons { ...
  //     .pipe(replace(/\{/g, ''))                                 // remove: }
  //     .pipe(replace(/\{[\w\s\t@\(\)\$:\-;\',]*/g, ''))          // remove:
  //     .pipe(replace(/\@include[\s\w\-\($\);,:'}]*/g, ''))       // remove: @include ... }
  //     .pipe(replace(/\.([\w-]*)/g, '{ "name": "$1" },'))        // make an object
  //     .pipe(replace(/.*:hover.*/g, ''))                         // remove: lines with :hover
  //
  //     .pipe(concat('fab-icon-readme.json'))                     // name it
  //
  //     .pipe(inject.wrap("[", "]"))                              // wrap in []
  //     .pipe(replace(/\},[\s]*(])/g, '}$1'))                     // last {} in arrays
  //     .pipe(replace(/],]/g, ']]'))                              // last array
  //     .pipe(gulp.dest('src/main/fabric/elements/icon/'));
  // });
  gulp.task('icon-desktop', function () {
    return sprity.src(desktopConf)
      .pipe(gulpif('*.scss',
        inject.prepend(releaseNote+'@import "elements/icon/fab-icon/desktop-mixins";\n\n')
      ))
      .pipe(gulpif('*.png',
        gulp.dest('dest/icon/'),
        gulp.dest('dest/icon/fab-icon/')
      ));
  });
  gulp.task('icon-mixin-desktop', function () {
    return sprity.src(desktopMixinConf)
      .pipe(gulpif('*.scss',
        inject.prepend(releaseNote)
      ))
      .pipe(gulpif('*.png',
        gulp.dest('dest/icon/'),
        gulp.dest('dest/icon/fs-icon/')
      ));
  });
  gulp.task('icon-mobile', function () {
    sprity = require('sprity');
    inject = require('gulp-inject-string');
    return sprity.src(mobileConf)
      .pipe(gulpif('*.scss',
        inject.prepend(releaseNote+'@import "mobile-mixins";\n\n')
      ))
      .pipe(gulpif('*.png',
        gulp.dest('dest/icon/'),
        gulp.dest('dest/icon/fs-icon/')
      ))
      .pipe($.if('mobile.scss', $.sass()))
      .pipe(gulp.dest('dest/icon'));
  });

  gulp.task('icon-mixin-mobile', function () {
    sprity = require('sprity');
    inject = require('gulp-inject-string');
    return sprity.src(mobileMixinConf)
      .pipe(gulpif('*.scss',
        inject.prepend(releaseNote)
      ))
      .pipe(gulpif('*.png',
        gulp.dest('dest/icon/'),
        gulp.dest('dest/icon/fs-icon/')
      ));
  });
  gulp.task('fab-icon-cleanup-before', function (done) {
    return del([
        'dest/'
      ], done);
  });
  gulp.task('fab-icon-cleanup-after', function (done) {
    return del("dest/icon/temp_*.png", done);
  });
  // end
// };
